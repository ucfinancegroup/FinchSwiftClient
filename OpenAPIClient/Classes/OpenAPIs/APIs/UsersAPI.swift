//
// UsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class UsersAPI {
    /**
     This route will be called once a user logs in on an iOS device and route body will contain the URL of the iOS device, this will be stored in the User model.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerIOSDevice(completion: @escaping ((_ data: ApiError?,_ error: Error?) -> Void)) {
        registerIOSDeviceWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     This route will be called once a user logs in on an iOS device and route body will contain the URL of the iOS device, this will be stored in the User model.
     - POST /registerIOSDevice
     - API Key:
       - type: apiKey finch-sid 
       - name: sidCookie
     - returns: RequestBuilder<ApiError> 
     */
    open class func registerIOSDeviceWithRequestBuilder() -> RequestBuilder<ApiError> {
        let path = "/registerIOSDevice"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApiError>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     This route receives a payload with requests to change data of a user
     
     - parameter updateUserRequest: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUser(updateUserRequest: UpdateUserRequest, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        updateUserWithRequestBuilder(updateUserRequest: updateUserRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     This route receives a payload with requests to change data of a user
     - PUT /update/user
     - API Key:
       - type: apiKey finch-sid 
       - name: sidCookie
     - parameter updateUserRequest: (body)  
     - returns: RequestBuilder<User> 
     */
    open class func updateUserWithRequestBuilder(updateUserRequest: UpdateUserRequest) -> RequestBuilder<User> {
        let path = "/update/user"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateUserRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
