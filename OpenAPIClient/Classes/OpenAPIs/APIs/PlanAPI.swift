//
// PlanAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class PlanAPI {
    /**
     Delete one specific plan by id
     
     - parameter id: (path) Numeric ID of the Plan to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deletePlan(id: Int, completion: @escaping ((_ data: Plan?,_ error: Error?) -> Void)) {
        deletePlanWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Delete one specific plan by id
     - DELETE /plan/{id}
     - API Key:
       - type: apiKey finch-sid 
       - name: sidCookie
     - parameter id: (path) Numeric ID of the Plan to delete 
     - returns: RequestBuilder<Plan> 
     */
    open class func deletePlanWithRequestBuilder(id: Int) -> RequestBuilder<Plan> {
        var path = "/plan/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Plan>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get one specific plan by id
     
     - parameter id: (path) Numeric ID of the Plan to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPlan(id: Int, completion: @escaping ((_ data: Plan?,_ error: Error?) -> Void)) {
        getPlanWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get one specific plan by id
     - GET /plan/{id}
     - API Key:
       - type: apiKey finch-sid 
       - name: sidCookie
     - parameter id: (path) Numeric ID of the Plan to get 
     - returns: RequestBuilder<Plan> 
     */
    open class func getPlanWithRequestBuilder(id: Int) -> RequestBuilder<Plan> {
        var path = "/plan/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Plan>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all of a user's plans
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPlans(completion: @escaping ((_ data: [Plan]?,_ error: Error?) -> Void)) {
        getPlansWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get all of a user's plans
     - GET /plans
     - API Key:
       - type: apiKey finch-sid 
       - name: sidCookie
     - returns: RequestBuilder<[Plan]> 
     */
    open class func getPlansWithRequestBuilder() -> RequestBuilder<[Plan]> {
        let path = "/plans"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Plan]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Creates a new plan for the user
     
     - parameter planNewPayload: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func newPlan(planNewPayload: PlanNewPayload, completion: @escaping ((_ data: Plan?,_ error: Error?) -> Void)) {
        newPlanWithRequestBuilder(planNewPayload: planNewPayload).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Creates a new plan for the user
     - POST /plan/new
     - API Key:
       - type: apiKey finch-sid 
       - name: sidCookie
     - parameter planNewPayload: (body)  
     - returns: RequestBuilder<Plan> 
     */
    open class func newPlanWithRequestBuilder(planNewPayload: PlanNewPayload) -> RequestBuilder<Plan> {
        let path = "/plan/new"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: planNewPayload)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Plan>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update one specific plan by id
     
     - parameter id: (path) Numeric ID of the Plan to update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePlan(id: Int, completion: @escaping ((_ data: Plan?,_ error: Error?) -> Void)) {
        updatePlanWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Update one specific plan by id
     - PUT /plan/{id}
     - API Key:
       - type: apiKey finch-sid 
       - name: sidCookie
     - parameter id: (path) Numeric ID of the Plan to update 
     - returns: RequestBuilder<Plan> 
     */
    open class func updatePlanWithRequestBuilder(id: Int) -> RequestBuilder<Plan> {
        var path = "/plan/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Plan>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
